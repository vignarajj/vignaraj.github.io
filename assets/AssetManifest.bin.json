"DSQHJWFzc2V0cy9hc3NldHMvZm9udHMvTm90b1NhbnMtQm9sZC50dGYMAQ0BBwVhc3NldAclYXNzZXRzL2Fzc2V0cy9mb250cy9Ob3RvU2Fucy1Cb2xkLnR0ZgcoYXNzZXRzL2Fzc2V0cy9mb250cy9Ob3RvU2Fucy1SZWd1bGFyLnR0ZgwBDQEHBWFzc2V0Byhhc3NldHMvYXNzZXRzL2ZvbnRzL05vdG9TYW5zLVJlZ3VsYXIudHRmByZhc3NldHMvYXNzZXRzL2ZvbnRzL05vdG9TZXJpZi1Cb2xkLnR0ZgwBDQEHBWFzc2V0ByZhc3NldHMvYXNzZXRzL2ZvbnRzL05vdG9TZXJpZi1Cb2xkLnR0ZgcpYXNzZXRzL2Fzc2V0cy9mb250cy9Ob3RvU2VyaWYtUmVndWxhci50dGYMAQ0BBwVhc3NldAcpYXNzZXRzL2Fzc2V0cy9mb250cy9Ob3RvU2VyaWYtUmVndWxhci50dGYHLGFzc2V0cy9hc3NldHMvZm9udHMvU291cmNlQ29kZVByby1pdGFsaWMudHRmDAENAQcFYXNzZXQHLGFzc2V0cy9hc3NldHMvZm9udHMvU291cmNlQ29kZVByby1pdGFsaWMudHRmBy5hc3NldHMvYXNzZXRzL2ZvbnRzL1NvdXJjZUNvZGVQcm8tdmFyaWFibGUudHRmDAENAQcFYXNzZXQHLmFzc2V0cy9hc3NldHMvZm9udHMvU291cmNlQ29kZVByby12YXJpYWJsZS50dGYHJmFzc2V0cy9mb250cy9NYXRlcmlhbEljb25zLVJlZ3VsYXIub3RmDAENAQcFYXNzZXQHJmFzc2V0cy9mb250cy9NYXRlcmlhbEljb25zLVJlZ3VsYXIub3RmBxlhc3NldHMvaW1hZ2VzL2FuZHJvaWQuc3ZnDAENAQcFYXNzZXQHGWFzc2V0cy9pbWFnZXMvYW5kcm9pZC5zdmcHHmFzc2V0cy9pbWFnZXMvYXJjaGl0ZWN0dXJlLnN2ZwwBDQEHBWFzc2V0Bx5hc3NldHMvaW1hZ2VzL2FyY2hpdGVjdHVyZS5zdmcHHGFzc2V0cy9pbWFnZXMvYXV0b21hdGlvbi5zdmcMAQ0BBwVhc3NldAccYXNzZXRzL2ltYWdlcy9hdXRvbWF0aW9uLnN2ZwccYXNzZXRzL2ltYWdlcy9jb2RlX21hZ2ljLnN2ZwwBDQEHBWFzc2V0Bxxhc3NldHMvaW1hZ2VzL2NvZGVfbWFnaWMuc3ZnBxZhc3NldHMvaW1hZ2VzL2RhcnQuc3ZnDAENAQcFYXNzZXQHFmFzc2V0cy9pbWFnZXMvZGFydC5zdmcHH2Fzc2V0cy9pbWFnZXMvZG9jdW1lbnRhdGlvbi5zdmcMAQ0BBwVhc3NldAcfYXNzZXRzL2ltYWdlcy9kb2N1bWVudGF0aW9uLnN2ZwcXYXNzZXRzL2ltYWdlcy9maWdtYS5zdmcMAQ0BBwVhc3NldAcXYXNzZXRzL2ltYWdlcy9maWdtYS5zdmcHGWFzc2V0cy9pbWFnZXMvZmx1dHRlci5zdmcMAQ0BBwVhc3NldAcZYXNzZXRzL2ltYWdlcy9mbHV0dGVyLnN2ZwcVYXNzZXRzL2ltYWdlcy9naXQuc3ZnDAENAQcFYXNzZXQHFWFzc2V0cy9pbWFnZXMvZ2l0LnN2ZwcYYXNzZXRzL2ltYWdlcy9naXRodWIuc3ZnDAENAQcFYXNzZXQHGGFzc2V0cy9pbWFnZXMvZ2l0aHViLnN2ZwceYXNzZXRzL2ltYWdlcy9naXRodWJfc2tpbGwuc3ZnDAENAQcFYXNzZXQHHmFzc2V0cy9pbWFnZXMvZ2l0aHViX3NraWxsLnN2ZwcWYXNzZXRzL2ltYWdlcy9qYXZhLnN2ZwwBDQEHBWFzc2V0BxZhc3NldHMvaW1hZ2VzL2phdmEuc3ZnBxxhc3NldHMvaW1hZ2VzL2phdmFzY3JpcHQuc3ZnDAENAQcFYXNzZXQHHGFzc2V0cy9pbWFnZXMvamF2YXNjcmlwdC5zdmcHFmFzc2V0cy9pbWFnZXMvamlyYS5zdmcMAQ0BBwVhc3NldAcWYXNzZXRzL2ltYWdlcy9qaXJhLnN2ZwcYYXNzZXRzL2ltYWdlcy9rb3RsaW4uc3ZnDAENAQcFYXNzZXQHGGFzc2V0cy9pbWFnZXMva290bGluLnN2ZwcaYXNzZXRzL2ltYWdlcy9saW5rZWRpbi5zdmcMAQ0BBwVhc3NldAcaYXNzZXRzL2ltYWdlcy9saW5rZWRpbi5zdmcHFmFzc2V0cy9pbWFnZXMvbGludC5zdmcMAQ0BBwVhc3NldAcWYXNzZXRzL2ltYWdlcy9saW50LnN2ZwcYYXNzZXRzL2ltYWdlcy9tYW51YWwuc3ZnDAENAQcFYXNzZXQHGGFzc2V0cy9pbWFnZXMvbWFudWFsLnN2ZwcYYXNzZXRzL2ltYWdlcy9tZWRpdW0uc3ZnDAENAQcFYXNzZXQHGGFzc2V0cy9pbWFnZXMvbWVkaXVtLnN2ZwcbYXNzZXRzL2ltYWdlcy9waG90b3Nob3Auc3ZnDAENAQcFYXNzZXQHG2Fzc2V0cy9pbWFnZXMvcGhvdG9zaG9wLnN2ZwcZYXNzZXRzL2ltYWdlcy9wb3N0bWFuLnN2ZwwBDQEHBWFzc2V0Bxlhc3NldHMvaW1hZ2VzL3Bvc3RtYW4uc3ZnBx5hc3NldHMvaW1hZ2VzL3Byb2ZpbGVfcGljLmpwZWcMAQ0BBwVhc3NldAceYXNzZXRzL2ltYWdlcy9wcm9maWxlX3BpYy5qcGVnBxhhc3NldHMvaW1hZ2VzL3Jldmlldy5zdmcMAQ0BBwVhc3NldAcYYXNzZXRzL2ltYWdlcy9yZXZpZXcuc3ZnByZhc3NldHMvaW1hZ2VzL3ZpZ25hcmFqX3Jlc3VtZV8yMDI0LnBkZgwBDQEHBWFzc2V0ByZhc3NldHMvaW1hZ2VzL3ZpZ25hcmFqX3Jlc3VtZV8yMDI0LnBkZgcfYXNzZXRzL3NoYWRlcnMvaW5rX3NwYXJrbGUuZnJhZwwBDQEHBWFzc2V0Bx9hc3NldHMvc2hhZGVycy9pbmtfc3BhcmtsZS5mcmFnBzJwYWNrYWdlcy9jdXBlcnRpbm9faWNvbnMvYXNzZXRzL0N1cGVydGlub0ljb25zLnR0ZgwBDQEHBWFzc2V0BzJwYWNrYWdlcy9jdXBlcnRpbm9faWNvbnMvYXNzZXRzL0N1cGVydGlub0ljb25zLnR0Zgc5cGFja2FnZXMvZm9udF9hd2Vzb21lX2ZsdXR0ZXIvbGliL2ZvbnRzL2ZhLWJyYW5kcy00MDAudHRmDAENAQcFYXNzZXQHOXBhY2thZ2VzL2ZvbnRfYXdlc29tZV9mbHV0dGVyL2xpYi9mb250cy9mYS1icmFuZHMtNDAwLnR0Zgc6cGFja2FnZXMvZm9udF9hd2Vzb21lX2ZsdXR0ZXIvbGliL2ZvbnRzL2ZhLXJlZ3VsYXItNDAwLnR0ZgwBDQEHBWFzc2V0BzpwYWNrYWdlcy9mb250X2F3ZXNvbWVfZmx1dHRlci9saWIvZm9udHMvZmEtcmVndWxhci00MDAudHRmBzhwYWNrYWdlcy9mb250X2F3ZXNvbWVfZmx1dHRlci9saWIvZm9udHMvZmEtc29saWQtOTAwLnR0ZgwBDQEHBWFzc2V0BzhwYWNrYWdlcy9mb250X2F3ZXNvbWVfZmx1dHRlci9saWIvZm9udHMvZmEtc29saWQtOTAwLnR0Zg=="